#include <iostream>
#include <string>
#include <vector>

class DNA
{
private:
    std::string sequence;

public:
    DNA(const std::string &seq) : sequence(seq) {}

    std::vector<int> findSubstringLoc(const std::string &sub)
    {
        std::vector<int> locations;
        size_t pos = sequence.find(sub, 0);
        while (pos != std::string::npos)
        {
            locations.push_back(pos + 1); // Convert to 1-based index
            pos = sequence.find(sub, pos + 1);
        }
        return locations;
    }
};

int main()
{
    std::string s = "TATATTCGCTATTCGCACAGTGTCAGTTATTCGCACAAATATTCGCTATTCGCCTATTCGCATATTCGCAACCAATATTCGCTGTCGTATTCGCCATCACGTACTATTCGCATATTCGCTATTCGCTATTCGCTATTCGCGGCATATTCGCTTATTCGCTATTCGCATATTCGCTTGTATTCGCGCTATTCGCGATATATTCGCTATTCGCGTATTCGCATGAGATATTCGCGAGGTATTCGCTATTCGCTATTCGCTATTCGCTTTATTCGCATTATTCGCCTCTGTATTCGCAACATGGTATTCGCTCTATTCGCTGTTTATTCGCGTATTCGCCCCTTTATTCGCTATTCGCGCCTATTCGCATATTCGCAGCATATTCGCATATTCGCACTATTCGCATATTATTCGCCGATATGTTATTCGCCTCCCTATTCGCTATTCGCTATTCGCGATATTCGCCGAGTATTCGCTCCTATATTCGCGTAGTACTATTCGCTCAGCAGGGGGTATTCGCCGTGCCCTATTCGCGTGGGGAGAATTATTCGCTAAGGAGGCCTATTCGCTATTCGCAACTTTATTCGCTCTATTCGCTGGGATTATTCGCGGCGCACTTATATTCGCAGTATTCGCTATTCGCTTATTCGCTATTCGCTCTATATTCGCGCTCGTATTCGCATTACATATTCGCATACTATTCGCTATTCGCGTATTCGCATATTCGCTATTCGCATAATATTCGCGACTATATTCGCAGTATTCGCTTATTCGCATAACTATTTTGTATTCGCGACATATTCGCGATTAACCGTTATTCGCTATTCGCCTTATTCGCCAAGTTATTCGCTATTCGCCTTATTCGCGATCAGGGTATTCGCCACATATTCGCCTATATTCGCTATTCGCGCGTATTCGCGTATTCGCCAATATTCGCGGTATTCGCTCATATTCGCATATTCGC";
    std::string t = "TATTCGCTA";

    DNA dna(s);
    std::vector<int> locations = dna.findSubstringLoc(t);

    for (int loc : locations)
    {
        std::cout << loc << " ";
    }
    std::cout << std::endl;

    return 0;
}
